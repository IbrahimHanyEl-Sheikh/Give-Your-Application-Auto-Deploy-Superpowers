version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid: 
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowid >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowid >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowid >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail # Add when this will run
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            SUCCESS=$(curl --insecure  https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules,backend/dist]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout        
      - restore_cache:  
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test 
                
  test-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout        
      - restore_cache:  
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:  
          keys: [frontend-build]
      - run:
          name: Scan frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
     
  scan-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:  
          keys: [backend-build]
      - run:
          name: Scan backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:  install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          no_output_timeout: 15m

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
          no_output_timeout: 15m

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_MIGRATIONS_DIR: $TYPEORM_MIGRATIONS_DIR
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_USERNAME: $TYPEORM_USERNAME

    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["7a:08:f1:81:4f:2a:a9:ba:39:f8:36:87:0b:8a:1f:61"] 

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add curl
            apk add --upgrade bash
            apk add --upgrade ansible
            pip3 install awscli
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:18.4.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:  
          keys: [backend-build]
      - run:
          name: install dependencies
          command: |
            apt-get update && \
            apt-get install -y python-pip python-dev && \
            pip install --upgrade awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm install
            npm run build
            # Run and save the migration output
            npm run migrations >  migrations_dump.txt
            cat migrations_dump.txt 
            # echo "has been executed successfully." > migrations_dump.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

            else
                curl https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi

      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apt-get update && \
            apt-get install -y python-pip python-dev && \
            pip install --upgrade awscli         
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo "NODE_ENV=production" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls ./dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
        environment:
            NODE_ENV: "local"
            VERSION: "1"
            ENVIRONMENT: "production"
            TYPEORM_CONNECTION: $TYPEORM_CONNECTION
            TYPEORM_DATABASE: $TYPEORM_DATABASE
            TYPEORM_ENTITIES: $TYPEORM_ENTITIES
            TYPEORM_HOST: $TYPEORM_HOST
            TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
            TYPEORM_MIGRATIONS_DIR: $TYPEORM_MIGRATIONS_DIR
            TYPEORM_PASSWORD: $TYPEORM_PASSWORD
            TYPEORM_PORT: $TYPEORM_PORT
            TYPEORM_USERNAME: $TYPEORM_USERNAME
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["7a:08:f1:81:4f:2a:a9:ba:39:f8:36:87:0b:8a:1f:61"] 
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --upgrade ansible
            apk add --update nodejs npm
            apk add --no-cache tar
            apk add --no-cache gzip
            pip3 install awscli
      - restore_cache:  
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            # npm i
            # npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir ./.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz ./.circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ls ./roles/deploy/files
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add curl
              apk add --upgrade bash
              apk add --upgrade ansible
              apk add --update nodejs npm
              apk add --no-cache tar
              apk add --no-cache gzip
              pip3 install awscli
            # your code here
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              echo ${BACKEND_IP}
              # your code here
      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
      #       # your code here
      # - destroy-environment:
      #     workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
            
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople
            # your code here
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      # Docker image here
      - image: cimg/node:18.4.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install dependencies
          command: |
            apt-get update && \
            apt-get install -y python-pip python-dev && \
            pip install --upgrade awscli   
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}" 
              curl https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/oldworkflowid  -d 'OldWorkflowID'
              curl https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/stacks  -d 'STACKS'

      - run:
          name: Remove old stacks and files
          command: |
            
            OldWorkflowID=$(curl --insecure  https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/oldworkflowid)
            STACKS=$(curl --insecure  https://kvdb.io/6oakWmzuqx4TvaofsPHvjq/stacks)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
         requires: [cloudfront-update]